name: RELEASE-IMAGE

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'The tag name of image'
        required: true
        default: ''
      pg_version:
        description: 'The version of postgres'
        required: true
      skip_test:
        description: 'Skip testing the docker image'
        required: false
        type: boolean
        default: false

  release:
    types:
      - published

env:
  RELEASE_VERSION: ${{ github.ref_name }}
  IMAGE_NAME: "apecloud/spilo"
  DOCKER_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
  ALIYUN_USER: ${{ secrets.ALIYUN_REGISTRY_USER }}
  ALIYUN_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

run-name: release image_tag:${{ inputs.image_tag }} pg_version:${{ inputs.pg_version }} skip_test:${{ inputs.skip_test }}

jobs:
  image-tag:
    runs-on: ubuntu-22.04
    outputs:
      tag-name: ${{ steps.get_tag_name.outputs.tag_name }}
    steps:
      - name: Get Tag Name
        id: get_tag_name
        run: |
          TAG_NAME=${{ inputs.image_tag }}
          #if [ -z "$TAG_NAME" ]; then
          #    TAG_NAME=${{ env.RELEASE_VERSION }}
          #fi
          #TAG_NAME="${TAG_NAME/v/}"
          echo tag_name=$TAG_NAME >> $GITHUB_OUTPUT

  release-image:
    needs: image-tag
    name: Build and Push Docker Image
    runs-on: ubuntu-22.04
    permissions:
      contents: 'read'
      packages: 'write'
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up packages
        run: sudo apt-get install -y shellcheck docker-compose

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install flake8
        run: python -m pip install flake8

      - name: Derive spilo image name
        id: image
        working-directory: postgres-appliance
        run: |
          DOCKER_IMAGE="docker.io/${{ env.IMAGE_NAME }}:${{ needs.image-tag.outputs.tag-name }}"
          ALIYUN_IMAGE="apecloud-registry.cn-zhangjiakou.cr.aliyuncs.com/${{ env.IMAGE_NAME }}:${{ needs.image-tag.outputs.tag-name }}"
          echo "DOCKER_NAME=$DOCKER_IMAGE" >> $GITHUB_OUTPUT
          echo "ALIYUN_NAME=$ALIYUN_IMAGE" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and export to local docker for testing
        if: ${{ !inputs.skip_test }}
        uses: docker/build-push-action@v6
        with:
          context: "postgres-appliance/"
          load: true
          tags: ${{ steps.image.outputs.DOCKER_NAME }}
          build-args: |
            PGVERSION=${{ inputs.pg_version }}
            PGOLDVERSIONS=${{ inputs.pg_old_versions }}

      - name: Test spilo docker image
        if: ${{ !inputs.skip_test }}
        continue-on-error: true
        env:
          SPILO_TEST_IMAGE: "${{ steps.image.outputs.DOCKER_NAME }}"
        run: |
          bash postgres-appliance/tests/test_spilo.sh

      - name: Build and push multi-arch image to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: "postgres-appliance/"
          push: true
          tags: "${{ steps.image.outputs.DOCKER_NAME }}"
          platforms: linux/amd64,linux/arm64
          build-args: |
            PGVERSION=${{ inputs.pg_version }}
            PGOLDVERSIONS=

      - name: Copy image to Aliyun registry using skopeo
        uses: coscene-io/skopeo-copy-action@v1.0.0
        with:
          src-creds: ${{ env.DOCKER_USER }}:${{ env.DOCKER_PASSWORD }}
          src-image: ${{ steps.image.outputs.DOCKER_NAME }}
          dst-creds: ${{ env.ALIYUN_USER }}:${{ env.ALIYUN_PASSWORD }}
          dst-image: ${{ steps.image.outputs.ALIYUN_NAME }}
